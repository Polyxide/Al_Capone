from telebot import TeleBot
from telebot import types
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import csv
import schedule
import time
import os
from dotenv import load_dotenv


load_dotenv()
token = os.getenv('TOKEN')

bot = TeleBot(token)

nick = 'name'


@bot.message_handler(commands=['start', 'menu'])
def menu(message):
    print(message)

    bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ–º—å—é Al Capone!üòé\n'
                                      '\n'
                                      '–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã —É–∫–∞–∑–∞–Ω–Ω—ã–µ –Ω–∏–∂–µ:\n'
                                      '\n‚úÖ‚úçÔ∏è /in - –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é \n'
                                      '\n‚ùé‚úçÔ∏è /out - –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ \n'
                                      '\nüìù /list - –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ \n'
                                      '\nüìÉ /guide - –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π \n'
                                      '\nüìç /location - –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π \n'
                                      '\nüéõ /menu - –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –º–µ–Ω—é \n'
                                      '\n'
                                      '–¢–∞–∫ –∂–µ, –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–æ–π \'–º–µ–Ω—é\' –≤ –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É.\n'
                                      '\nP.s: –°–ø–∏—Å–∫–∏ –æ–±–Ω—É–ª—è—é—Ç—Å—è –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –∫—Ä–∞–π–Ω–µ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –≤–µ—á–µ—Ä–∞, –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–µ—á–µ—Ä–∞üé©')


@bot.message_handler(commands=['in'])
def reg(message):
    markup = ReplyKeyboardMarkup(row_width=2)
    item_button = KeyboardButton('—Å—É–±–±–æ—Ç–∞')
    item_button2 = KeyboardButton('–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ')
    markup.add(item_button)
    markup.add(item_button2)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å', reply_markup=markup)

    bot.register_next_step_handler(message, registr)


def registr(message):
    if message.text == '—Å—É–±–±–æ—Ç–∞':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫-–Ω–µ–π–º‚úÖ‚úçÔ∏è')
        bot.register_next_step_handler(message, saturday_nick_func)
    elif message.text == '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫-–Ω–µ–π–º‚úÖ‚úçÔ∏è')
        bot.register_next_step_handler(message, sunday_nick_func)


######################################################################################
def saturday_nick_func(message):
    global nick
    nick = str(message.text)
    bot.send_message(message.chat.id, '–û—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–º–∞—Ä–∫—Éüí≠')
    bot.register_next_step_handler(message, saturday_remark_func)


def saturday_remark_func(message):

    data_record = str(nick) + ',' + str(message.text) + '\n'
    with open('data_list_1.csv', mode='a') as file:
        file.write(data_record)

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', callback_data='—Å—É–±–±–æ—Ç–∞'))
    bot.send_message(message.chat.id, '–ó–∞–ø–∏—Å—å –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!‚úÖ', reply_markup=markup)


@bot.callback_query_handler(func=lambda call:True)
def call_back(call):
    show(call.message)


####################################################################################
def sunday_nick_func(message):
    global nick
    nick = str(message.text)
    bot.send_message(message.chat.id, '–û—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–º–∞—Ä–∫—Éüí≠')
    bot.register_next_step_handler(message, sunday_remark_func)


def sunday_remark_func(message):
    data_record = str(nick) + ',' + str(message.text) + '\n'
    with open('data_list_2.csv', mode='a') as file:
        file.write(data_record)

    bot.send_message(message.chat.id, '–ó–∞–ø–∏—Å—å –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!‚úÖ')


#########################################################################################


@bot.message_handler(commands=['out'])
def rm(message):
    markup = ReplyKeyboardMarkup(row_width=2)
    item_button = KeyboardButton('—Å—É–±–±–æ—Ç–∞')
    item_button2 = KeyboardButton('–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ')
    markup.add(item_button)
    markup.add(item_button2)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å', reply_markup=markup)

    bot.register_next_step_handler(message, rm_func)


def rm_func(message):
    if message.text == '—Å—É–±–±–æ—Ç–∞':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫-–Ω–µ–π–º‚ùé‚úçÔ∏è')
        bot.register_next_step_handler(message, saturday_rm)
    elif message.text == '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫-–Ω–µ–π–º‚ùé‚úçÔ∏è')
        bot.register_next_step_handler(message, sunday_rm)


def saturday_rm(message):
    with open('data_list_1.csv', 'r') as file:
        reader = csv.reader(file)
        data_rm = list(reader)
        updated_data = [row for row in data_rm if row[0] != message.text]
    with open('data_list_1.csv', 'w', newline='') as file:
        writer = csv.writer(file)
        writer.writerows(updated_data)
    bot.send_message(message.chat.id, '–í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞‚ùé')


def sunday_rm(message):
    with open('data_list_2.csv', 'r') as file:
        reader = csv.reader(file)
        data_rm = list(reader)
        updated_data = [row for row in data_rm if row[0] != message.text]
    with open('data_list_2.csv', 'w', newline='') as file:
        writer = csv.writer(file)
        writer.writerows(updated_data)
    bot.send_message(message.chat.id, '–í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞‚ùé')


#########################################################################################
@bot.message_handler(commands=['list'])
def lst(message):
    markup = ReplyKeyboardMarkup(row_width=2)
    item_button = KeyboardButton('—Å—É–±–±–æ—Ç–∞')
    item_button2 = KeyboardButton('–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ')
    markup.add(item_button)
    markup.add(item_button2)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å', reply_markup=markup)

    bot.register_next_step_handler(message, show)


def show(message):
    if message.text == '—Å—É–±–±–æ—Ç–∞':
        with open('data_list_1.csv', mode='r') as file:
            reader = csv.reader(file)
            for row in reader:
                bot.send_message(message.chat.id, str(row))

    elif message.text == '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ':
        with open('data_list_2.csv', mode='r') as file:
            reader = csv.reader(file)
            for row in reader:
                bot.send_message(message.chat.id, str(row))


#######################################################################################
@bot.message_handler(commands=['guide'])
def rules(message):
    file = open('image.png', 'rb')
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('O–±—É—á–∞—é—â–∏–µ –≤–∏–¥–µ–æ –ø–æ –ú–∞—Ñ–∏–∏', url='https://www.youtube.com/playlist?list=PLrDRU9lcDcit1DBV9FDKxTjbh9JRfBLma'))
    bot.send_photo(message.chat.id, file, reply_markup=markup)
#    bot.send_message(message.chat.id, '–ü—Ä–∞–≤–∏–ª–∞ –∫–ª—É–±–∞:\n'
#                                      '\n'
#                                      '–ü–µ—Ä–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ –∫–ª—É–±–∞: ')
#ToDo


@bot.message_handler(commands=['location'])
def loc(message):

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–í—Ö–æ–¥', url='https://youtu.be/RUqr4jRPN9M?si=RNGVirp03QGiV8y4'))
    markup.add(types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ', url='https://maps.google.com/maps?q=43.210383,27.907334&ll=43.210383,27.907334&z=16'))
    bot.send_message(message.chat.id, '–í–ª–∞–¥–∏—Å–ª–∞–≤ –í–∞—Ä–Ω–µ–Ω—á–∏–∫ 53-55üìç', reply_markup=markup)


@bot.message_handler()
def reg_next_step(message):
    bot.send_message(message.chat.id, '–î–ª—è –≥—Ä–∞–º–æ—Ç–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é')


def clear_csv():
    os.remove('data_list_1.csv')
    os.remove('data_list_2.csv')
    init_csv_headers()


schedule.every().monday.at("00:01").do(clear_csv)


def init_csv_headers():
    if not os.path.isfile('data_list_1.csv'):
        with open('data_list_1.csv', mode='a', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(['–ò–º—è', '–†–µ–º–∞—Ä–∫–∞'])

    if not os.path.isfile('data_list_2.csv'):
        with open('data_list_2.csv', mode='a', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(['–ò–º—è', '–†–µ–º–∞—Ä–∫–∞'])


def job_queue():
    while True:
        schedule.run_pending()
        time.sleep(1)


def main():
    bot.polling()
    init_csv_headers()
    job_queue()


if __name__ == '__main__':
    main()

